est_ipw_gee1_b2_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B2,
svydesign = sample_A_svy_Y22,
method_selection = "probit",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
est_ipw_gee2_b2_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B2,
svydesign = sample_A_svy_Y22,
method_selection = "probit",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
res <- rbind(res, data.frame(
k = rep(k, 8),
sample = rep(c("b1", "b2"), each = 4),
y = rep(c("y11", "y12", "y21", "y22"), times = 2),
trues = rep(
c(mean(population$Y_11), mean(population$Y_12),
mean(population$Y_21), mean(population$Y_22)), 2
),
ipw_mle_no = c(
est_ipw_mle_b1_y11_no$output$mean, est_ipw_mle_b1_y12_no$output$mean,
est_ipw_mle_b1_y21_no$output$mean, est_ipw_mle_b1_y22_no$output$mean,
est_ipw_mle_b2_y11_no$output$mean, est_ipw_mle_b2_y12_no$output$mean,
est_ipw_mle_b2_y21_no$output$mean, est_ipw_mle_b2_y22_no$output$mean
),
ipw_gee1_no = c(est_ipw_gee1_b1_y11_no$output$mean, est_ipw_gee1_b1_y12_no$output$mean,
est_ipw_gee1_b1_y21_no$output$mean, est_ipw_gee1_b1_y22_no$output$mean,
est_ipw_gee1_b2_y11_no$output$mean, est_ipw_gee1_b2_y12_no$output$mean,
est_ipw_gee1_b2_y21_no$output$mean, est_ipw_gee1_b2_y22_no$output$mean
),
ipw_gee2_no = c(est_ipw_gee2_b1_y11_no$output$mean, est_ipw_gee2_b1_y12_no$output$mean,
est_ipw_gee2_b1_y21_no$output$mean, est_ipw_gee2_b1_y22_no$output$mean,
est_ipw_gee2_b2_y11_no$output$mean, est_ipw_gee2_b2_y12_no$output$mean,
est_ipw_gee2_b2_y21_no$output$mean, est_ipw_gee2_b2_y22_no$output$mean
),
ipw_mle_no_ci = c(
est_ipw_mle_b1_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_mle_b1_y11_no$confidence_interval[, 2],
est_ipw_mle_b1_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_mle_b1_y12_no$confidence_interval[, 2],
est_ipw_mle_b1_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_mle_b1_y21_no$confidence_interval[, 2],
est_ipw_mle_b1_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_mle_b1_y22_no$confidence_interval[, 2],
est_ipw_mle_b2_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_mle_b2_y11_no$confidence_interval[, 2],
est_ipw_mle_b2_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_mle_b2_y12_no$confidence_interval[, 2],
est_ipw_mle_b2_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_mle_b2_y21_no$confidence_interval[, 2],
est_ipw_mle_b2_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_mle_b2_y22_no$confidence_interval[, 2]
),
ipw_gee1_no_ci = c(est_ipw_gee1_b1_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee1_b1_y11_no$confidence_interval[, 2],
est_ipw_gee1_b1_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee1_b1_y12_no$confidence_interval[, 2],
est_ipw_gee1_b1_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee1_b1_y21_no$confidence_interval[, 2],
est_ipw_gee1_b1_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee1_b1_y22_no$confidence_interval[, 2],
est_ipw_gee1_b2_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee1_b2_y11_no$confidence_interval[, 2],
est_ipw_gee1_b2_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee1_b2_y12_no$confidence_interval[, 2],
est_ipw_gee1_b2_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee1_b2_y21_no$confidence_interval[, 2],
est_ipw_gee1_b2_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee1_b2_y22_no$confidence_interval[, 2]),
ipw_gee2_no_ci = c(est_ipw_gee2_b1_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee2_b1_y11_no$confidence_interval[, 2],
est_ipw_gee2_b1_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee2_b1_y12_no$confidence_interval[, 2],
est_ipw_gee2_b1_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee2_b1_y21_no$confidence_interval[, 2],
est_ipw_gee2_b1_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee2_b1_y22_no$confidence_interval[, 2],
est_ipw_gee2_b2_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee2_b2_y11_no$confidence_interval[, 2],
est_ipw_gee2_b2_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee2_b2_y12_no$confidence_interval[, 2],
est_ipw_gee2_b2_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee2_b2_y21_no$confidence_interval[, 2],
est_ipw_gee2_b2_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee2_b2_y22_no$confidence_interval[, 2])
)
)
}, error = function(e) {
message("Error in iteration ", k, ": ", e$message)
return(data.frame(k = k, sample = NA, y = NA, trues = NA, ipw_mle_no = NA, ipw_gee1_no = NA, ipw_gee2_no = NA, ipw_mle_no_ci = NA, ipw_gee1_no_ci = NA, ipw_gee2_no_ci = NA))
})
}
stopCluster(cl)
Sys.time() - A
## processing results
setDT(res)
results_simulation1_process <- res |> melt(id.vars = 1:3)
saveRDS(results_simulation1_process, file = "results/ipw_probit.rds")
warnings()
ipw_cloglog <- readRDS("~/Desktop/masters/results/ipw_cloglog.rds")
# Filtrowanie danych, aby usunąć wiersze zawierające "ci" w kolumnie variable
df <- ipw_cloglog
ipw <- df %>%
filter(!grepl("ci", variable))
# Zakładamy, że dane są załadowane do ramki danych 'df'
# Najpierw musimy wydzielić wartość true dla każdej kombinacji sample i y
true_values <- ipw %>%
filter(variable == "trues") %>%
select(sample, y, true_value = value)
ipw
ipw_probit <- readRDS("~/Desktop/masters/results/ipw_probit.rds")
ipw_cloglog <- readRDS("~/Desktop/masters/results/ipw_cloglog.rds")
dr1 <- readRDS("~/Desktop/masters/results/dr1.rds")
ipw_probit
results_simulation1_process
# Filtrowanie danych, aby usunąć wiersze zawierające "ci" w kolumnie variable
df <- ipw_probit
ipw <- df %>%
filter(!grepl("ci", variable))
# Zakładamy, że dane są załadowane do ramki danych 'df'
# Najpierw musimy wydzielić wartość true dla każdej kombinacji sample i y
true_values <- ipw %>%
filter(variable == "trues") %>%
select(sample, y, true_value = value)
# Teraz możemy obliczyć Bias, SE oraz RMSE dla każdego innego poziomu variable
results <- ipw %>%
filter(variable != "trues") %>%
left_join(true_values, by = c("sample", "y")) %>%
group_by(sample, y, variable) %>%
summarise(
Bias = mean(value) - mean(true_value),  # różnica między średnią z estymacji a true
SE = sd(value),                         # odchylenie standardowe estymacji
RMSE = sqrt(mean((value - true_value)^2))  # pierwiastek z średniej kwadratu różnic
)
# Wyświetlenie wyników
print(results, n = 24)
results
print(results, n = 24)
ipw
View(ipw)
# Filtrowanie danych, aby usunąć wiersze zawierające "ci" w kolumnie variable
ipw_probit <- ipw_probit[!is.nan(ipw_probit$value), ]
ipw_probit
df <- ipw_probit
ipw <- df %>%
filter(!grepl("ci", variable))
# Zakładamy, że dane są załadowane do ramki danych 'df'
# Najpierw musimy wydzielić wartość true dla każdej kombinacji sample i y
true_values <- ipw %>%
filter(variable == "trues") %>%
select(sample, y, true_value = value)
# Teraz możemy obliczyć Bias, SE oraz RMSE dla każdego innego poziomu variable
results <- ipw %>%
filter(variable != "trues") %>%
left_join(true_values, by = c("sample", "y")) %>%
group_by(sample, y, variable) %>%
summarise(
Bias = mean(value) - mean(true_value),  # różnica między średnią z estymacji a true
SE = sd(value),                         # odchylenie standardowe estymacji
RMSE = sqrt(mean((value - true_value)^2))  # pierwiastek z średniej kwadratu różnic
)
# Wyświetlenie wyników
print(results, n = 24)
# Teraz możemy obliczyć Bias, SE oraz RMSE dla każdego innego poziomu variable
results <- ipw %>%
filter(variable != "trues") %>%
# left_join(true_values, by = c("sample", "y")) %>%
group_by(sample, y, variable) %>%
summarise(
Bias = mean(value) - mean(true_value),  # różnica między średnią z estymacji a true
SE = sd(value),                         # odchylenie standardowe estymacji
RMSE = sqrt(mean((value - true_value)^2))  # pierwiastek z średniej kwadratu różnic
)
print(results, n = 24)
set.seed(seed_for_sim)
##### Doubly robust inference when combining probability
##### and non-probability samples with high dimensional
##### data
N <- 10000
n_A <- 500
p <- 50
alpha_vec1 <- c(-2, 1, 1, 1, 1, rep(0, p - 5))
alpha_vec2 <- c(0, 0, 0, 3, 3, 3, 3, rep(0, p - 7))
beta_vec <- c(1, 0, 0, 1, 1, 1, 1, rep(0, p - 7))
## generate X
X <- cbind(
"(Intercept)" = 1,
matrix(
rnorm(N * (p - 1)),
nrow = N, byrow = TRUE,
dimnames = list(NULL, paste0("X", 1:(p - 1)))
)
)
X_formula <- as.formula(paste("~", paste0("X", 1:(p - 1), collapse = " + ")))
## generate Y
Y_11 <- as.numeric(X %*% beta_vec) +  rnorm(N) ## OM I: linear model
Y_12 <- 1 + exp(3 * sin(as.numeric(X %*% beta_vec))) + X[, "X5"] + X[, "X6"] + rnorm(N) ## OM II: nonlinear model
pi_Y_21 <- plogis(as.numeric(X %*% beta_vec)) ## OM III: linear model for binary Y
pi_Y_22 <- plogis(2 - log((X %*% beta_vec)^2) - 2 * X[, "X5"] + 2 * X[, "X6"]) ## OM IV: nonlinear model for binary Y
Y_21 <- rbinom(N, 1, prob = pi_Y_21)
Y_22 <- rbinom(N, 1, prob = pi_Y_22)
## generate probs
pi_A_Y11 <- inclusionprobabilities(0.25 + abs(X[, "X1"]) + 0.03 * abs(Y_11), n_A)
pi_A_Y12 <- inclusionprobabilities(0.25 + abs(X[, "X1"]) + 0.03 * abs(Y_12), n_A)
pi_A_Y21 <- inclusionprobabilities(0.25 + abs(X[, "X1"]) + 0.03 * abs(Y_21), n_A)
pi_A_Y22 <- inclusionprobabilities(0.25 + abs(X[, "X1"]) + 0.03 * abs(Y_22), n_A)
pi_B1 <- plogis(as.numeric(X %*% alpha_vec1)) ## PSM I: linear probability
pi_B2 <- plogis(3.5 + as.numeric(log(X^2) %*% alpha_vec2) - sin(X[, "X3"] + X[, "X4"]) - X[, "X5"] + X[, "X6"]) ## PSM II: nonlinear
## generate data
population <- data.frame(pi_A_Y11, pi_A_Y12, pi_A_Y21, pi_A_Y22, Y_11, Y_12, Y_21, Y_22, X[, 2:p])
res <- matrix(nrow = 0, ncol = 9) %>% as.data.frame()
for (k in 1:sims) {
print(k)
tryCatch({
## generate samples
flag_B1 <- rbinom(N, 1, prob = pi_B1)
flag_B2 <- rbinom(N, 1, prob = pi_B2)
flag_A_Y11 <- UPpoisson(pik = pi_A_Y11)
flag_A_Y12 <- UPpoisson(pik = pi_A_Y12)
flag_A_Y21 <- UPpoisson(pik = pi_A_Y21)
flag_A_Y22 <- UPpoisson(pik = pi_A_Y22)
sample_A_svy_Y11 <- svydesign(ids = ~ 1, probs = ~ pi_A_Y11, pps = "brewer", data = population[flag_A_Y11 == 1, ])
sample_A_svy_Y12 <- svydesign(ids = ~ 1, probs = ~ pi_A_Y12, pps = "brewer", data = population[flag_A_Y12 == 1, ])
sample_A_svy_Y21 <- svydesign(ids = ~ 1, probs = ~ pi_A_Y21, pps = "brewer", data = population[flag_A_Y21 == 1, ])
sample_A_svy_Y22 <- svydesign(ids = ~ 1, probs = ~ pi_A_Y22, pps = "brewer", data = population[flag_A_Y22 == 1, ])
sample_B1 <- population[flag_B1 == 1, ]
sample_B2 <- population[flag_B2 == 1, ]
## sample B1 ---------------------------------------------------------------
### Y11 -----------------------------------------------------------------
# mle
est_ipw_mle_b1_y11_no <- nonprob(selection = X_formula,
target = ~ Y_11,
data = sample_B1,
svydesign = sample_A_svy_Y11,
method_selection = "cloglog")
# gee 1
est_ipw_gee1_b1_y11_no <- nonprob(selection = X_formula,
target = ~ Y_11,
data = sample_B1,
svydesign = sample_A_svy_Y11,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
# gee 2
est_ipw_gee2_b1_y11_no <- nonprob(selection = X_formula,
target = ~ Y_11,
data = sample_B1,
svydesign = sample_A_svy_Y11,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
### Y12 -----------------------------------------------------------------
# mle
est_ipw_mle_b1_y12_no <- nonprob(selection = X_formula,
target = ~ Y_12,
data = sample_B1,
method_selection = "cloglog",
svydesign = sample_A_svy_Y12)
# gee 1
est_ipw_gee1_b1_y12_no <- nonprob(selection = X_formula,
target = ~ Y_12,
data = sample_B1,
svydesign = sample_A_svy_Y12,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
# gee 2
est_ipw_gee2_b1_y12_no <- nonprob(selection = X_formula,
target = ~ Y_12,
data = sample_B1,
svydesign = sample_A_svy_Y12,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
### Y21 -----------------------------------------------------------------
# mle
est_ipw_mle_b1_y21_no <- nonprob(selection = X_formula,
target = ~ Y_21,
data = sample_B1,
method_selection = "cloglog",
svydesign = sample_A_svy_Y21)
# gee 1
est_ipw_gee1_b1_y21_no <- nonprob(selection = X_formula,
target = ~ Y_21,
data = sample_B1,
svydesign = sample_A_svy_Y21,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
# gee 2
est_ipw_gee2_b1_y21_no <- nonprob(selection = X_formula,
target = ~ Y_21,
data = sample_B1,
svydesign = sample_A_svy_Y21,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
### Y22 -----------------------------------------------------------------
# mle
est_ipw_mle_b1_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B1,
method_selection = "cloglog",
svydesign = sample_A_svy_Y22)
# gee 1
est_ipw_gee1_b1_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B1,
svydesign = sample_A_svy_Y22,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
# gee 2
est_ipw_gee2_b1_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B1,
svydesign = sample_A_svy_Y22,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
## sample B2 ---------------------------------------------------------------
### Y11 -----------------------------------------------------------------
# mle
est_ipw_mle_b2_y11_no <- nonprob(selection = X_formula,
target = ~ Y_11,
data = sample_B2,
method_selection = "cloglog",
svydesign = sample_A_svy_Y11)
# gee 1
est_ipw_gee1_b2_y11_no <- nonprob(selection = X_formula,
target = ~ Y_11,
data = sample_B2,
svydesign = sample_A_svy_Y11,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
# gee 2
est_ipw_gee2_b2_y11_no <- nonprob(selection = X_formula,
target = ~ Y_11,
data = sample_B2,
svydesign = sample_A_svy_Y11,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
### Y12 -----------------------------------------------------------------
# mle
est_ipw_mle_b2_y12_no <- nonprob(selection = X_formula,
target = ~ Y_12,
data = sample_B2,
method_selection = "cloglog",
svydesign = sample_A_svy_Y12)
# gee 1
est_ipw_gee1_b2_y12_no <- nonprob(selection = X_formula,
target = ~ Y_12,
data = sample_B2,
svydesign = sample_A_svy_Y12,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
# gee 2
est_ipw_gee2_b2_y12_no <- nonprob(selection = X_formula,
target = ~ Y_12,
data = sample_B2,
svydesign = sample_A_svy_Y12,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
### Y21 -----------------------------------------------------------------
est_ipw_mle_b2_y21_no <- nonprob(selection = X_formula,
target = ~ Y_21,
data = sample_B2,
method_selection = "cloglog",
svydesign = sample_A_svy_Y21)
est_ipw_gee1_b2_y21_no <- nonprob(selection = X_formula,
target = ~ Y_21,
data = sample_B2,
svydesign = sample_A_svy_Y21,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
est_ipw_gee2_b2_y21_no <- nonprob(selection = X_formula,
target = ~ Y_21,
data = sample_B2,
svydesign = sample_A_svy_Y21,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
### Y22 -----------------------------------------------------------------
est_ipw_mle_b2_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B2,
method_selection = "cloglog",
svydesign = sample_A_svy_Y22)
est_ipw_gee1_b2_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B2,
svydesign = sample_A_svy_Y22,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 1))
est_ipw_gee2_b2_y22_no <- nonprob(selection = X_formula,
target = ~ Y_22,
data = sample_B2,
svydesign = sample_A_svy_Y22,
method_selection = "cloglog",
control_selection = controlSel(est_method_sel = "gee",
h = 2))
res <- rbind(res, data.frame(
k = rep(k, 8),
sample = rep(c("b1", "b2"), each = 4),
y = rep(c("y11", "y12", "y21", "y22"), times = 2),
trues = rep(
c(mean(population$Y_11), mean(population$Y_12),
mean(population$Y_21), mean(population$Y_22)), 2
),
ipw_mle_no = c(
est_ipw_mle_b1_y11_no$output$mean, est_ipw_mle_b1_y12_no$output$mean,
est_ipw_mle_b1_y21_no$output$mean, est_ipw_mle_b1_y22_no$output$mean,
est_ipw_mle_b2_y11_no$output$mean, est_ipw_mle_b2_y12_no$output$mean,
est_ipw_mle_b2_y21_no$output$mean, est_ipw_mle_b2_y22_no$output$mean
),
ipw_gee1_no = c(est_ipw_gee1_b1_y11_no$output$mean, est_ipw_gee1_b1_y12_no$output$mean,
est_ipw_gee1_b1_y21_no$output$mean, est_ipw_gee1_b1_y22_no$output$mean,
est_ipw_gee1_b2_y11_no$output$mean, est_ipw_gee1_b2_y12_no$output$mean,
est_ipw_gee1_b2_y21_no$output$mean, est_ipw_gee1_b2_y22_no$output$mean
),
ipw_gee2_no = c(est_ipw_gee2_b1_y11_no$output$mean, est_ipw_gee2_b1_y12_no$output$mean,
est_ipw_gee2_b1_y21_no$output$mean, est_ipw_gee2_b1_y22_no$output$mean,
est_ipw_gee2_b2_y11_no$output$mean, est_ipw_gee2_b2_y12_no$output$mean,
est_ipw_gee2_b2_y21_no$output$mean, est_ipw_gee2_b2_y22_no$output$mean
),
ipw_mle_no_ci = c(
est_ipw_mle_b1_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_mle_b1_y11_no$confidence_interval[, 2],
est_ipw_mle_b1_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_mle_b1_y12_no$confidence_interval[, 2],
est_ipw_mle_b1_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_mle_b1_y21_no$confidence_interval[, 2],
est_ipw_mle_b1_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_mle_b1_y22_no$confidence_interval[, 2],
est_ipw_mle_b2_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_mle_b2_y11_no$confidence_interval[, 2],
est_ipw_mle_b2_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_mle_b2_y12_no$confidence_interval[, 2],
est_ipw_mle_b2_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_mle_b2_y21_no$confidence_interval[, 2],
est_ipw_mle_b2_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_mle_b2_y22_no$confidence_interval[, 2]
),
ipw_gee1_no_ci = c(est_ipw_gee1_b1_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee1_b1_y11_no$confidence_interval[, 2],
est_ipw_gee1_b1_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee1_b1_y12_no$confidence_interval[, 2],
est_ipw_gee1_b1_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee1_b1_y21_no$confidence_interval[, 2],
est_ipw_gee1_b1_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee1_b1_y22_no$confidence_interval[, 2],
est_ipw_gee1_b2_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee1_b2_y11_no$confidence_interval[, 2],
est_ipw_gee1_b2_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee1_b2_y12_no$confidence_interval[, 2],
est_ipw_gee1_b2_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee1_b2_y21_no$confidence_interval[, 2],
est_ipw_gee1_b2_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee1_b2_y22_no$confidence_interval[, 2]),
ipw_gee2_no_ci = c(est_ipw_gee2_b1_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee2_b1_y11_no$confidence_interval[, 2],
est_ipw_gee2_b1_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee2_b1_y12_no$confidence_interval[, 2],
est_ipw_gee2_b1_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee2_b1_y21_no$confidence_interval[, 2],
est_ipw_gee2_b1_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee2_b1_y22_no$confidence_interval[, 2],
est_ipw_gee2_b2_y11_no$confidence_interval[, 1] < mean(population$Y_11) & mean(population$Y_11) < est_ipw_gee2_b2_y11_no$confidence_interval[, 2],
est_ipw_gee2_b2_y12_no$confidence_interval[, 1] < mean(population$Y_12) & mean(population$Y_12) < est_ipw_gee2_b2_y12_no$confidence_interval[, 2],
est_ipw_gee2_b2_y21_no$confidence_interval[, 1] < mean(population$Y_21) & mean(population$Y_21) < est_ipw_gee2_b2_y21_no$confidence_interval[, 2],
est_ipw_gee2_b2_y22_no$confidence_interval[, 1] < mean(population$Y_22) & mean(population$Y_22) < est_ipw_gee2_b2_y22_no$confidence_interval[, 2])
)
)
}, error = function(e) {
message("Error in iteration ", k, ": ", e$message)
return(data.frame(k = k, sample = NA, y = NA, trues = NA, ipw_mle_no = NA, ipw_gee1_no = NA, ipw_gee2_no = NA, ipw_mle_no_ci = NA, ipw_gee1_no_ci = NA, ipw_gee2_no_ci = NA))
})
}
stopCluster(cl)
res
## processing results
setDT(res)
results_simulation1_process <- res |> melt(id.vars = 1:3)
results_simulation1_process
saveRDS(results_simulation1_process, file = "results/ipw_cloglog_new.rds")
ipw_cloglog_new <- readRDS("~/Desktop/masters/results/ipw_cloglog_new.rds")
df <- ipw_cloglog_new
ipw <- df %>%
filter(!grepl("ci", variable))
# Zakładamy, że dane są załadowane do ramki danych 'df'
# Najpierw musimy wydzielić wartość true dla każdej kombinacji sample i y
true_values <- ipw %>%
filter(variable == "trues") %>%
select(sample, y, true_value = value)
# Teraz możemy obliczyć Bias, SE oraz RMSE dla każdego innego poziomu variable
results <- ipw %>%
filter(variable != "trues") %>%
left_join(true_values, by = c("sample", "y")) %>%
group_by(sample, y, variable) %>%
summarise(
Bias = mean(value) - mean(true_value),  # różnica między średnią z estymacji a true
SE = sd(value),                         # odchylenie standardowe estymacji
RMSE = sqrt(mean((value - true_value)^2))  # pierwiastek z średniej kwadratu różnic
)
# Wyświetlenie wyników
print(results, n = 24)
results
# Wyświetlenie wyników
print(results, n = 24)
# Filtrowanie danych, aby usunąć wiersze zawierające "ci" w kolumnie variable
ipw_cloglog_new <- ipw_cloglog_new[!is.nan(ipw_cloglog_new$value), ]
df <- ipw_cloglog_new
ipw <- df %>%
filter(!grepl("ci", variable))
# Zakładamy, że dane są załadowane do ramki danych 'df'
# Najpierw musimy wydzielić wartość true dla każdej kombinacji sample i y
true_values <- ipw %>%
filter(variable == "trues") %>%
select(sample, y, true_value = value)
# Teraz możemy obliczyć Bias, SE oraz RMSE dla każdego innego poziomu variable
results <- ipw %>%
filter(variable != "trues") %>%
left_join(true_values, by = c("sample", "y")) %>%
group_by(sample, y, variable) %>%
summarise(
Bias = mean(value) - mean(true_value),  # różnica między średnią z estymacji a true
SE = sd(value),                         # odchylenie standardowe estymacji
RMSE = sqrt(mean((value - true_value)^2))  # pierwiastek z średniej kwadratu różnic
)
# Wyświetlenie wyników
print(results, n = 24)
dr1 <- readRDS("~/Desktop/masters/results/dr1.rds")
# Filtrowanie danych, aby usunąć wiersze zawierające "ci" w kolumnie variable
df_filtered <- dr1 %>%
filter(!grepl("ci", variable))
# Obliczanie Bias, SE i RMSE
result <- df_filtered %>%
group_by(y, variable) %>%
summarise(
trues = mean(trues),
mean_estimate = mean(value),
Bias = mean(value) - mean(trues),
SE = sqrt(sum((value - mean(value))^2) / (n() - 1)),
RMSE = sqrt((mean(value) - mean(trues))^2 + (sqrt(sum((value - mean(value))^2) / (n() - 1)))^2)
) %>%
ungroup()
print(result, n = nrow(result))
